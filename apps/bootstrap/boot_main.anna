defmodule(BootMain, {
  @alias vm.Lang;
  @alias vm.NativeKernel;
  @alias vm.Pid;
  @alias util.StringUtil;
  @alias util.File;
  @alias vm.Reference;

  @def start([Atom], {
    result = compile_path('apps/stdlib/lib');
    compile_path('apps/unit_tests/lib');
    compile_path('apps/ia/lib');
    compile_path('apps/unit_tests/tests');
    result = compile_path('apps/project/lib');
    start_app(result);
    @_'ok';
  });

  @def start_app({Tuple: [@_'error', message]}, [Atom], {
    @_'error';
  });

  @def start_app({Tuple: _}, [Atom], {
    @native NativeKernel.applyMFA(self(), @_'IAMain', @_'start', @tuple[], {});
  });

  @def self([Pid], {
    @native vm.Process.self();
  });

  @def compile_path({String: path}, [Tuple], {
    ref = @native Lang.beginTransaction();
    files = @native File.readDirectory(path);
    path = @native StringUtil.concat(path, '/');
    compile_files(ref, path, files);
  });

  @def compile_files({Reference: ref, String: _, LList: {}}, [Tuple], {
    AppCode.commit(ref);
  });

  @def compile_files({Reference: ref, String: path, LList: {file | files;}}, [Tuple], {
    file_path = @native StringUtil.concat(path, file);
    [@_'ok', content] = @native File.getContent(file_path);
    result = AppCode.read(ref, cast(content, String));
    handle_compile_result(ref, result, path, cast(files, LList));
  });

  @def handle_compile_result({Reference: _, Tuple: [@_'error', message], String: _, LList: _}, [Tuple], {
    @native IO.inspect(message);
    [@_'error', message];
  });

  @def handle_compile_result({Reference: ref, Tuple: _, String: path, LList: files}, [Tuple], {
    compile_files(ref, path, cast(files, LList));
  });

})
