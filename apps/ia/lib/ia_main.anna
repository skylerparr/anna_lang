defmodule(IAMain, {
  @alias vm.Process;
  @alias vm.Pid;
  @alias vm.Port;
  @alias vm.PortMan;

  @const VSN = '0.0.0';
  @const PREFIX = 'ia(';

  @def start({
    History.start();
//    UnitTests.start();

    pid = Kernel.spawn(@_'IAMain', @_'start_interactive_anna');
    supervise(cast(pid, Pid));
  });

  @def supervise({Pid: pid}, [Atom], {
    Kernel.monitor(pid);
    Kernel.receive(@fn {
      [{Tuple: status}] => {
        @native IO.inspect(status);
      };
    });
    start();
  });

  @def start_interactive_anna([Atom], {
    port = @native PortMan.create('CPPCLIInput');

    welcome = Str.concat('Interactive Anna version ', VSN);
    System.println(welcome);
    prompt(port);
  });

  @def prompt({Port: port}, [Atom], {
    prompt_string = get_prompt();
    System.print(prompt_string);
    collect_user_input(port, '', '');
  });

  @def get_prompt([String], {
    counter = History.get_counter();
    prefix = Str.concat(PREFIX, cast(counter, String));
    Str.concat(prefix, ')> ');
  });

  @def read_input({Port: port}, [Int], {
    @native PortMan.send(port, null);
    Kernel.receive(@fn {
      [{Tuple: [@_'ok', input]}] => {
        input;
      };
    });
  });

  @def collect_user_input({Port: port, String: current_string, String: full_string}, [String], {
    input = read_input(port);
    current_string = handle_input(input, current_string, full_string, port);
    collect_user_input(port, current_string, full_string);
  });

  @def handle_result({Atom: @_'ok', String: current_string}, [Atom], {
    History.increment_line();
    prompt_string = get_prompt();
    System.print(prompt_string);
    //prompt();
    current_string;
  });

  @def handle_result({Atom: @_'continuation', String: current_string}, [String], {
    continuation_prompt(current_string);
  });

  @def handle_result({Atom: @_'exit', String: _}, [String], {
    @_'nil';
  });

  @def continuation_prompt({String: current_string}, [String], {
    current_string;
  });

  // enter
  @def handle_input({Int: 13, String: current_string, String: full_string, Port: _}, [String], {
    System.println('');
    current_string = Str.remove_whitespace(current_string);
    result = CommandHandler.process_command(current_string);
    handle_result(result, current_string);
    '';
  });

  // ctrl+u
  @def handle_input({Int: 21, String: current_string, String: full_string, Port: _}, [String], {
    clear_prompt(current_string);
    print_prompt('', full_string);
    '';
  });

  // ctrl+d
  @def handle_input({Int: 4, String: _, String: _, Port: port}, [String], {
    System.println('');
    System.println('exiting...');
    Kernel.stop();
    '';
  });

  // backspace
  @def handle_input({Int: 127, String: current_string, String: full_string, Port: port}, [String], {
    clear_prompt(current_string);
    len = Str.length(current_string);
    len = Kernel.subtract(len, 1);
    current_string = Str.substring(current_string, 0, len);
    print_prompt(current_string, full_string);
    current_string;
  });

  // arrow keys
  @def handle_input({Int: 27, String: current_string, String: full_string, Port: port}, [String], {
    read_input(port);
    input = read_input(port);
    handle_arrow_input(input, current_string, full_string, port);
  });

  @def handle_input({Int: code, String: current_string, String: full_string, Port: port}, [String], {
    str = Str.from_char_code(code);
    str = Str.remove_whitespace(str);
    System.print(str);
    current_string = Str.concat(current_string, str);
    current_string;
  });

  // up arrow
  @def handle_arrow_input({Int: 65, String: current_string, String: full_string, Port: port}, [String], {
    clear_prompt(current_string);
    current_string = History.back();
    print_prompt(current_string, full_string);
    current_string;
  });

  // down arrow
  @def handle_arrow_input({Int: 66, String: current_string, String: full_string, Port: port}, [String], {
    clear_prompt(current_string);
    current_string = History.forward();
    print_prompt(current_string, full_string);
    current_string;
  });

  @def clear_prompt({String: current_string}, {
    str_len = Str.length(current_string);
    str_len = Kernel.add(str_len, 20);
    clear_string = Str.rpad('\r', ' ', str_len);
    System.print(clear_string);
  });

  @def print_prompt({String: current_string, String: full_string}, {
    str_prompt = get_prompt();
    str_prompt = Str.concat(str_prompt, current_string);
    str_prompt = Str.concat('\r', str_prompt);
    str_prompt = Str.rpad(str_prompt, ' ', 7);
    System.print(str_prompt);
  });

})