defmodule(IAMain, {
  @alias vm.Process;
  @alias vm.Pid;
  @alias vm.Port;
  @alias vm.PortMan;

  @const VSN = '0.0.0';
  @const PREFIX = 'ia(';
  @const IA_PID = @_'ia';

  @def start({
    History.start();
    UnitTests.start();

    pid = Kernel.spawn(@_'IAMain', @_'start_interactive_anna');
    Kernel.register_pid(pid, IA_PID);
    supervise(cast(pid, Pid));
  });

  @def restart_ia({Tuple: [@_'ok', _]}, [Atom], {
    pid = Kernel.get_pid_by_name(IA_PID);
    Kernel.exit(pid);
  });

  @def restart_ia({Tuple: [@_'error', message]}, [Atom], {
    System.println('compilation failure');
    System.println(cast(message, String));
    @_'error';
  });

  @def supervise({Pid: pid}, [Atom], {
    Kernel.monitor(pid);
    Kernel.receive(@fn {
      [{Tuple: status}] => {
        @native IO.inspect(status);
      };
    });
    start();
  });

  @def start_interactive_anna([Atom], {
    port = @native PortMan.create('CPPCLIInput');

    welcome = Str.concat('Interactive Anna version ', VSN);
    System.println(welcome);
    state = IAState%{
      port: port,
      current_string: '', 
      full_string: '',
      position: 0,
      prompt_type: @_'basic'
    }; 
    collect_user_input(state);
  });

  @def get_prompt({Atom: @_'continuation'}, [String], {
    '..> ';
  });

  @def get_prompt({Atom: _}, [String], {
    counter = History.get_counter();
    prefix = Str.concat(PREFIX, cast(counter, String));
    Str.concat(prefix, ')> ');
  });

  @def read_input({Port: port}, [Int], {
    @native PortMan.send(port, @_'nil');
    Kernel.receive(@fn {
      [{Tuple: [@_'ok', input]}] => {
        input;
      };
    });
  });

  @def collect_user_input({IAState: state}, [String], {
    port = state.port;
    current_string = state.current_string;
    full_string = state.full_string;
    position = state.position;
    prompt_type = state.prompt_type;

    prompt_string = '\r';
    prompt = get_prompt(cast(prompt_type, Atom));
    prompt_string = Str.concat(prompt_string, prompt);
    prompt_string = Str.concat(prompt_string, current_string);
    prompt_string = Str.concat(prompt_string, ' ');
    prompt_string = Str.concat(prompt_string, '\r');
    prompt_string = Str.concat(prompt_string, prompt);
    sub = Str.substr(current_string, 0, position);
    prompt_string = Str.concat(prompt_string, sub);

    System.print(prompt_string);

    input = read_input(port);
    state = handle_input(input, state);
    
    collect_user_input(state);
  });

  @def handle_result({Atom: @_'ok', IAState: state}, [IAState], {
    History.increment_line();

    state = IAState.set(state, @_'current_string', '');
    state = IAState.set(state, @_'full_string', '');
    state = IAState.set(state, @_'position', 0);
    IAState.set(state, @_'prompt_type', @_'basic');
  });

  @def handle_result({Atom: @_'continuation', IAState: state}, [IAState], {
    History.increment_line();

    current_string = Str.concat(state.current_string, ' ');
    current_string = Str.concat(state.full_string, current_string);
    state = IAState.set(state, @_'full_string', current_string);
    state = IAState.set(state, @_'current_string', '');
    state = IAState.set(state, @_'position', 0);
    IAState.set(state, @_'prompt_type', @_'continuation');
  });

  @def handle_result({Atom: @_'exit', IAState: state}, [IAState], {
    state = IAState.set(state, @_'current_string', '');
    IAState.set(state, @_'position', 0);
  });

  // enter
  @def handle_input({Int: 13, IAState: state}, [IAState], {
    System.println('');

    current_string = Str.remove_whitespace(state.current_string);
    state = IAState.set(state, @_'current_string', current_string);
    state = IAState.set(state, @_'position', 0);

    current_string = Str.concat(state.full_string, current_string);

    result = CommandHandler.process_command(current_string);
    handle_result(result, state);
  });

  // ctrl+a
  @def handle_input({Int: 1, IAState: state}, [IAState], {
    IAState.set(state, @_'position', 0);
  });

  // ctrl+u
  @def handle_input({Int: 21, IAState: state}, [IAState], {
    clear_prompt(state);
    state = IAState.set(state, @_'current_string', '');
    IAState.set(state, @_'position', 0);
  });

  // ctrl+d
  @def handle_input({Int: 4, IAState: state}, [IAState], {
    System.println('');
    System.println('exiting...');
    Kernel.stop();
    state;
  });

  // ctrl+y -> takes a multiline statement and makes it 1 line
  @def handle_input({Int: 25, IAState: state}, [IAState], {
    current_string = Str.concat(state.full_string, state.current_string);
    state = IAState.set(state, @_'current_string', current_string);
    state = IAState.set(state, @_'position', Str.length(current_string));
    state = IAState.set(state, @_'full_string', '');
    IAState.set(state, @_'prompt_type', @_'basic');
  });

  // backspace
  @def handle_input({Int: 127, IAState: state}, [IAState], {
    position = state.position;
    current_string = state.current_string;

    is_eq = Kernel.equal(position, 0);
    Kernel.cond(is_eq, @fn {
      [{Atom: @_'true'}] => {
        state;
      };
      [{Atom: _}] => {
        clear_prompt(state);
        position = Kernel.subtract(position, 1);
        position = ensure_bounds(position, current_string);

        pre = Str.substr(current_string, 0, position);
        
        len = Str.length(current_string); 
        pos = Kernel.add(position, 1);
        post = Str.substr(current_string, pos, len);

        current_string = Str.concat(pre, post);

        state = IAState.set(state, @_'current_string', current_string);
        IAState.set(state, @_'position', position);
      };
    });
  });

  // delete (up key value)
  @def handle_input({Int: 126, IAState: state}, [IAState], {
    // ignore
    state;
  });

  // arrow keys
  @def handle_input({Int: 27, IAState: state}, [IAState], {
    port = state.port;
    read_input(port);
    input = read_input(port);
    handle_arrow_input(input, state);
  });

  // tab
  @def handle_input({Int: 9, IAState: state}, [IAState], {
    Kernel.cond(state.current_string, @fn {
      [{String: ''}] => {
        state;
      };
      [{String: curr_str}] => {
        tab_complete(state);
      };
    });
  });

  // everything else
  @def handle_input({Int: code, IAState: state}, [IAState], {
    current_string = state.current_string;
    position = state.position;

    str = Str.from_char_code(code);
    str = Str.remove_whitespace(str);

    pre = Str.substr(current_string, 0, position);
    pre = Str.concat(pre, str);
    
    len = Str.length(current_string); 
    post = Str.substr(current_string, position, len);

    current_string = Str.concat(pre, post);

    position = Kernel.add(position, 1);

    state = IAState.set(state, @_'current_string', current_string);
    IAState.set(state, @_'position', position);
  });

  // up arrow
  @def handle_arrow_input({Int: 65, IAState: state}, [IAState], {
    clear_prompt(state);
    current_string = History.back();
    position = Str.length(current_string);

    state = IAState.set(state, @_'current_string', current_string);
    IAState.set(state, @_'position', position);
  });

  // down arrow
  @def handle_arrow_input({Int: 66, IAState: state}, [IAState], {
    clear_prompt(state);
    current_string = History.forward();
    position = Str.length(current_string);

    state = IAState.set(state, @_'current_string', current_string);
    IAState.set(state, @_'position', position);
  });

  // right arrow
  @def handle_arrow_input({Int: 67, IAState: state}, [IAState], {
    clear_prompt(state);
    position = Kernel.add(state.position, 1);
    position = ensure_bounds(position, state.current_string);

    IAState.set(state, @_'position', position);
  });

  // left arrow
  @def handle_arrow_input({Int: 68, IAState: state}, [IAState], {
    position = Kernel.subtract(state.position, 1);
    position = ensure_bounds(position, state.current_string);

    IAState.set(state, @_'position', position);
  });

  // delete
  @def handle_arrow_input({Int: 51, IAState: state}, [IAState], {
    position = state.position;
    current_string = state.current_string;

    is_eq = Kernel.equal(position, Str.length(current_string));
    Kernel.cond(is_eq, @fn {
      [{Atom: @_'true'}] => {
        state;
      };
      [{Atom: _}] => {
        clear_prompt(state);

        pre = Str.substr(current_string, 0, position);
        
        len = Str.length(current_string); 
        pos = Kernel.add(position, 1);
        post = Str.substr(current_string, pos, len);

        current_string = Str.concat(pre, post);

        state = IAState.set(state, @_'current_string', current_string);
        IAState.set(state, @_'position', position);
      };
    });
  });

  @def handle_arrow_input({Int: _, IAState: state}, [IAState], {
    state;
  });

  @def clear_prompt({IAState: state}, [IAState], {
    prompt = get_prompt(cast(state.prompt_type, Atom));
    prompt_len = Str.length(prompt);
    current_string = state.current_string;
    str_len = Str.length(cast(current_string, String));
    str_len = Kernel.add(prompt_len, str_len);
    str_len = Kernel.add(str_len, 60);
    clear_string = Str.rpad('\r', ' ', str_len);
    System.print(clear_string);
    state;
  });

  @def ensure_bounds({Int: -1, String: _}, [Int], {
    0;
  });

  @def ensure_bounds({Int: pos, String: current_string}, [Int], {
    str_len = Str.length(current_string);
    is_gte = Kernel.gte(pos, str_len);
    Kernel.cond(is_gte, @fn {
      [{Atom: @_'true'}] => {
        str_len;
      };
      [{Atom: _}] => {
        pos;
      };
    });
  });
  
  @def tab_complete({IAState: state}, [IAState], {
    curr_str = state.current_string;

    frags = Str.split(curr_str, '.');
    last = @native LList.last(frags);
    beginning = @native LList.remove(frags, last);  

    Kernel.cond(beginning, @fn {
      [{LList: {}}] => {
        //filter module
        filtered = filter_modules(cast(last, String));
        len = @native LList.length(filtered);
        Kernel.cond(len, @fn {
          [{Int: 1}] => {
            mod = @native LList.hd(filtered);
            mod_string = @native Atom.to_s(mod);
            mod_string = Str.concat(mod_string, '.');
            state = IAState.set(state, @_'current_string', mod_string);
            IAState.set(state, @_'position', Str.length(mod_string));
          };
          [{Int: _}] => {
            System.println('');
            EEnum.each(filtered, @fn {
              [{Atom: value}] => {
                @native IO.inspect(value);
              };
            });
            state;
          };
        });
      };
      [{LList: module}] => {
        //filter functions
        str_module = EEnum.join(module, '.');
        module = Str.to_atom(str_module);
        filtered = filter_functions(module, cast(last, String));
        len = @native LList.length(filtered);
        Kernel.cond(len, @fn {
          [{Int: 1}] => {
            fun = @native LList.hd(filtered);
            fun_string = @native Atom.to_s(fun);
            str_module = Str.concat(str_module, '.');
            curr_string = Str.concat(str_module, fun_string);
            state = IAState.set(state, @_'current_string', curr_string);
            IAState.set(state, @_'position', Str.length(curr_string));
          };
          [{Int: _}] => {
            System.println('');
            EEnum.each(filtered, @fn {
              [{Atom: value}] => {
                value = @native Atom.to_s(value);
                System.println(value);
              };
            });
            state;
          };
        });
      };
    });
  });

  @def filter_modules({String: string}, [LList], {
    modules = AppCode.get_modules();
    EEnum.filter(modules, @fn {
      [{Atom: module}] => {
        mod_str = @native Atom.to_s(module);
        Str.starts_with(mod_str, string);    
      };
    });
  });
  
  @def filter_functions({Atom: module, String: string}, [LList], {
    api_functions = AppCode.get_api(module);
    EEnum.filter(api_functions, @fn {
      [{Atom: fun}] => {
        fun_str = @native Atom.to_s(fun);
        Str.starts_with(fun_str, string);
      };
    });
  });
})
