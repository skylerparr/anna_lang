defmodule(CommandHandler, {
  @alias vm.NativeKernel;
  @const PROJECT_SRC_PATH = 'project/';

  @def process_command({String: 'exit'}, [Atom], {
    System.println('exiting...');
    @native NativeKernel.stop();
    @_'exit';
  });

  @def process_command({String: 'r'}, [Atom], {
    @native NativeKernel.recompile();
    @native NativeKernel.stop();
    @_'exit';
  });

  @def process_command({String: 'cb'}, [Atom], {
    AppCode.compile('apps/bootstrap/boot_main.anna');
    @_'ok';
  });

  @def process_command({String: 'v ' => number}, [Atom], {
    index = Str.string_to_int(number);
    index = Kernel.subtract(index, 1);
    command = History.get(cast(index, Int));
    System.println(command);
    @_'ok';
  });

//  @def process_command({String: 'build'}, [Atom], {
//    System.set_cwd(PROJECT_SRC_PATH);
//    System.println('building project');
//    [@_'ok', cwd] = System.get_cwd();
//    System.println(cast(cwd, String));
//    AnnaCompiler.build_project();
//    System.set_cwd('..');
//    @_'ok';
//  });

//  @def process_command({String: 't'}, [Atom], {
//    History.push('t');
//    Kernel.spawn(@fn {
//        [{}] => {
//        UnitTests.add_test(@_'StringTest');
//        UnitTests.add_test(@_'NumberTest');
//        UnitTests.add_test(@_'AtomTest');
//        UnitTests.add_test(@_'TupleTest');
//        UnitTests.add_test(@_'LListTest');
//        UnitTests.add_test(@_'MMapTest');
//        UnitTests.add_test(@_'KeywordTest');
//        UnitTests.add_test(@_'ModuleFunctionTest');
//        UnitTests.add_test(@_'CustomTypesTest');
//
//        UnitTests.run_tests();
//      }
//    });
//    @_'ok';
//  });

  @def process_command({String: ''}, [Atom], {
    @_'ok';
  });

  @def process_command({String: cmd}, [Atom], {
    History.push(cmd);
    result = Repl.eval(cmd);
    handle_result(result);
    @_'ok';
  });

  @def handle_result({Tuple: [@_'ok', @_'continuation']}, [Atom], {
    @_'continuation';
  });

  @def handle_result({Tuple: _}, [Atom], {
    @_'ok';
  });
})