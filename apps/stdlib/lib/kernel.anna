defmodule(Kernel, {
  @alias vm.Pid;
  @alias vm.NativeKernel;
  @alias vm.Function;
  @alias vm.Process;

  @def stop({
    @native NativeKernel.stop();
  });

  @def flush([Atom], {
    data = Kernel.receive(@fn {
      [{Tuple: result}] => {
        result;
      };
    });
    @_'ok';
  });

  @def receive({Function: fun}, [Dynamic], {
    @native NativeKernel.receive(fun);
  });

  @def receive({Function: fun, Int: timeout}, [Dynamic], {
    @native NativeKernel.receive(fun, timeout);
  });

  @def send({Pid: pid, Tuple: value}, [Atom], {
    @native NativeKernel.send(pid, value);
  });

  @def send({Pid: pid, Atom: value}, [Atom], {
    @native NativeKernel.send(pid, value);
  });

  @def send({Pid: pid, String: value}, [Atom], {
    @native NativeKernel.send(pid, value);
  });

  @def send({Pid: pid, Int: value}, [Atom], {
    @native NativeKernel.send(pid, value);
  });

  @def send({Pid: pid, Float: value}, [Atom], {
    @native NativeKernel.send(pid, value);
  });

  @def send({Pid: pid, MMap: value}, [Atom], {
    @native NativeKernel.send(pid, value);
  });

  @def send({Pid: pid, Dynamic: value}, [Atom], {
    @native NativeKernel.send(pid, value);
  });

  @def sleep({Int: milliseconds}, [Atom], {
    @native Process.sleep(milliseconds);
  });

  @def self([Pid], {
    @native vm.Process.self();
  });

  @def pid_info([Tuple], {
    dict = @native vm.Process.getDictionary();
    [@_'ok', [@_'dictionary' => dict]];
  });

  @def monitor({Pid: pid}, [Atom], {
    @native NativeKernel.monitor(pid);
  });

  @def demonitor({Pid: pid}, [Atom], {
    @native NativeKernel.demonitor(pid);
  });

  @def trap_exit({Pid: pid}, [Atom], {
    @native NativeKernel.trapExit(pid);
  });

  @def untrap_exit({Pid: pid}, [Atom], {
    @native NativeKernel.untrapExit(pid);
  });

  @def spawn({Atom: module, Atom: func}, [Pid], {
    @native NativeKernel.spawn(module, func, @tuple[], {});
  });

  @def spawn({Function: fun}, [Pid], {
    @native NativeKernel.spawnFn(fun, {});
  });

  @def spawn({Atom: module, Atom: func, Tuple: types, LList: args}, [Pid], {
    @native NativeKernel.spawn(module, func, types, args);
  });

  @def spawn_link({Function: fun}, [Pid], {
    @native NativeKernel.spawn_linkFn(fun, {});
  });

  @def spawn_link({Atom: module, Atom: func}, [Pid], {
    @native NativeKernel.spawn_link(module, func, @tuple[], {});
  });

  @def spawn_link({Atom: module, Atom: func, Tuple: types, LList: args}, [Pid], {
    @native NativeKernel.spawn_link(module, func, types, args);
  });

  @def add({Float: a, Float: b}, [Float], {
    @native NativeKernel.add(a, b);
  });

  @def subtract({Float: a, Float: b}, [Float], {
    @native NativeKernel.subtract(a, b);
  });

  @def same({Dynamic: a, Dynamic: b}, [Atom], {
    @native NativeKernel.same(a, b);
  });

  @def equal({Dynamic: a, Dynamic: b}, [Atom], {
    @native NativeKernel.equal(a, b);
  });

  @def exit({Pid: pid}, [Atom], {
    @native NativeKernel.exit(pid);
  });

  @def crash({Pid: pid}, [Atom], {
    @native NativeKernel.crash(pid);
  });

  @def register_pid({Pid: pid, Atom: name}, [Atom], {
    @native Process.registerPid(pid, name);
  });

  @def unregister_pid({Atom: name}, [Atom], {
    @native Process.unregisterPid(name);
  });

  @def get_pid_by_name({Atom: name}, [Pid], {
    @native Process.getPidByName(name);
  });

  @def apply({Function: fun, LList: args}, [Dynamic], {
    @native NativeKernel.apply(self(), fun, args);
  });

  @def apply({Atom: module, Atom: fun, Tuple: types, LList: args}, [Dynamic], {
    @native NativeKernel.applyMFA(self(), module, fun, types, args);
  });

  @def case({Int: input, Function: handler}, [Dynamic], {
    handler(input);
  });

  @def case({Float: input, Function: handler}, [Dynamic], {
    handler(input);
  });

  @def case({String: input, Function: handler}, [Dynamic], {
    handler(input);
  });

  @def case({Tuple: input, Function: handler}, [Dynamic], {
    handler(input);
  });

  @def case({LList: input, Function: handler}, [Dynamic], {
    handler(input);
  });

  @def case({MMap: input, Function: handler}, [Dynamic], {
    handler(input);
  });

  @def case({Pid: input, Function: handler}, [Dynamic], {
    handler(input);
  });

  @def case({Dynamic: input, Function: handler}, [Dynamic], {
    handler(input);
  });

})