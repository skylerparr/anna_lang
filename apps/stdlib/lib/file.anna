defmodule(File, {
  @alias util.File;
  @alias sys.FileSystem;

  @def get_content({String: file_path}, [String], {
    @native File.getContent(file_path);
  });

  @def save_content({String: file_path, String: content}, [Tuple], {
    @native File.saveContent(file_path, content);
    [@_'ok', file_path];
  });

  @def mkdir_p({String: dir}, [Tuple], {
    @native FileSystem.createDirectory(dir);
    [@_'ok', dir];
  });

  @def rm({String: file}, [Tuple], {
    @native File.remove(file);
  });

  @def rm_rf({String: dir}, [Tuple], {
    @native File.removeAll(dir);
  });

  @def cp({String: src, String: dest}, [Tuple], {
    @native File.copy(src, dest);
    [@_'ok', src];
  });

  @def cp_rf({String: path, String: dest}, [Tuple], {
    [@_'ok', is_directory] = is_dir(path);
    _copy_files(cast(is_directory, Atom), path, dest);
    [@_'ok', path, dest];
  });

  @def _copy_files({Atom: @_'true', String: path, String: dest}, [Tuple], {
    mkdir_p(dest);
    [@_'ok', files] = ls(path);
    DefaultEnum.each(cast(files, LList), @fn {
      [{String: file_or_dir}] => {
        path = Str.concat(path, file_or_dir);
        dest = Str.concat(dest, file_or_dir);
        [@_'ok', is_directory] = is_dir(path);
        _copy_files(cast(is_directory, Atom), path, dest);
      };
    });
  });

  @def _copy_files({Atom: @_'false', String: path, String: dest}, [Tuple], {
    cp(path, dest);
  });

  @def ls({String: dir}, [Tuple], {
    files = @native File.readDirectory(dir);
    [@_'ok', files];
  });

  @def is_dir({String: dir}, [Tuple], {
    result = @native File.isDirectory(dir);
    [@_'ok', result];
  });

  @def exists({String: file}, [Atom], {
    @native File.exists(file);
  });

  @def append({String: file, String: data}, [Tuple], {
    @native File.append(file, data);
  });
})