defmodule(StateServer, {
  @alias vm.Pid;

  @def start({Atom: module, Dynamic: state}, [Tuple], {
    pid = Kernel.spawn(
      @_'StateServer',
      @_'init',
      [@_'Atom', @_'Dynamic'],
      {module; state;}
    );
    [@_'ok', pid];
  });

  @def start({Atom: module, Dynamic: state, Atom: name}, [Tuple], {
    reg_pid = Kernel.get_pid_by_name(name);
    fun = @fn {
      [{Atom: @_'nil'}] => {
        [@_'ok', pid] = start(module, state);
        Kernel.register_pid(cast(pid, Pid), name);
        [@_'ok', pid];
      };
      [{Pid: pid}] => {
        [@_'error', @_'already_started', pid];
      };
    }
    Kernel.cond(reg_pid, fun);
  });

  @def start_link({Atom: module, Dynamic: state}, [Tuple], {
    pid = Kernel.spawn_link(
      @_'StateServer',
      @_'init',
      [@_'Atom', @_'Dynamic'],
      {module; state;}
    );
    [@_'ok', pid];
  });

  @def stop({Pid: pid}, [Atom], {
    Kernel.exit(cast(pid, Pid));
  });

  @def stop({Atom: name}, [Tuple], {
    pid = Kernel.get_pid_by_name(name);
    fun = @fn {
      [{Atom: @_'nil'}] => {
        [@_'error', 'not running'];
      };
      [{Pid: pid}] => {
        Kernel.exit(pid);
        [@_'ok', 'killed'];
      };
    }
    Kernel.cond(pid, fun);
  });

  @def init({Atom: module, Dynamic: state}, [Atom], {
    [@_'ok', state] = Kernel.apply(module, @_'init', [@_'Dynamic'], {state;});
    main_loop(module, cast(state, Dynamic));
  });

  @def main_loop({Atom: module, Dynamic: state}, [Atom], {
    state = Kernel.receive(@fn {
      [{Tuple: [@_'async', from_pid, message]}] => {
        [@_'noreply', state] =
          Kernel.apply(
            module,
            @_'handle_async',
            [@_'Tuple', @_'vm_Pid', @_'Dynamic'],
            {message; from_pid; state;}
          );
        state;
      };
      [{Tuple: [@_'sync', from_pid, message]}] => {
        [@_'reply', ret_val, state] =
          Kernel.apply(
            module,
            @_'handle_sync',
            [@_'Tuple', @_'vm_Pid', @_'Dynamic'],
            {message; from_pid; state;}
          );
        Kernel.send(cast(from_pid, Pid), [@_'reply', ret_val]);
 
        state;
      };
      [{Tuple: random_message}] => {
        Kernel.apply(
          module,
          @_'handle_unmatched',
          [@_'Dynamic', @_'Dynamic'],
          {random_message; state;}
        );
        state;
      };
    });
    main_loop(module, cast(state, Dynamic));
  });

  @def send_async({Pid: pid, Tuple: message}, [Atom], {
    self = Kernel.self();
    Kernel.send(pid, [@_'async', self, message]);
  });

  @def send_async({Atom: name, Tuple: message}, [Atom], {
    pid = Kernel.get_pid_by_name(name);
    send_async(pid, message);
  });

  @def send_sync({Pid: pid, Tuple: message}, [Dynamic], {
    self = Kernel.self();
    Kernel.send(pid, [@_'sync', self, message]);
    Kernel.receive(@fn {
      [{Tuple: [@_'reply', state]}] => {
        state;
      };
    });
  });

  @def send_sync({Atom: name, Tuple: message}, [Atom], {
    pid = Kernel.get_pid_by_name(name);
    send_sync(pid, message);
  });
})
