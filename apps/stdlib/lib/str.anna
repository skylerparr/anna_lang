defmodule(Str, {
  @alias util.StringUtil;

  @def concat({String: lhs, String: rhs}, [String], {
    @native util.StringUtil.concat(lhs, rhs);
  });

  @def from_char_code({Int: char_code}, [String], {
    @native StringUtil.fromCharCode(char_code);
  });

  @def substring({String: string, Int: start, Int: end}, [String], {
    @native StringUtil.substring(string, start, end);
  });

  @def substr({String: string, Int: start, Int: len}, [String], {
    @native StringUtil.substr(string, start, len);
  });

  @def length({String: string}, [Int], {
    @native StringUtil.length(string);
  });

  @def rpad({String: string, String: c_string, Int: length}, [String], {
    @native StringUtil.rpad(string, c_string, length);
  });

  @def string_to_int({String: s}, [Int], {
    @native StringUtil.stringToInt(s);
  });

  @def string_to_float({String: s}, [Float], {
    @native Std.parseFloat(s);
  });

  @def int_to_string({Int: i}, [String], {
    @native StringUtil.intToString(i);
  });

  @def random({Int: length}, [String], {
    @native StringUtil.random(length);
  });

  @def nameify({String: str}, [String], {
    @native StringUtil.nameify(str);
  });

  @def snake_case({String: str}, [String], {
    @native StringUtil.toSnakeCase(str);
  });

  @def starts_with({String: str, String: other_str}, [Atom], {
    @native StringUtil.startsWith(str, other_str);
  });

  @def ends_with({String: str, String: other_str}, [Atom], {
    @native StringUtil.endsWith(str, other_str);
  });

  @def remove_whitespace({String: str}, [String], {
    @native StringUtil.removeWhitespace(str);
  });

  @def split({String: str, String: delimiter}, [LList], {
    @native StringUtil.split(str, delimiter);
  });

  @def to_atom({String: str}, [Atom], {
    @native StringUtil.toAtom(str);
  });
})
