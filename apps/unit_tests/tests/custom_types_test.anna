defmodule(CustomTypesTest, {
  @alias vm.Lang;
  @def test_should_pass_type_to_function([Atom], {
    sample = SampleType%{name: 'Ellie', age: 3};
    pass_type(sample);
  });

  @def test_should_pass_type_to_function_interp([Atom], {
    @native Lang.eval("sample = SampleType%{name: 'Stink', age: 3};
      CustomTypesTest.pass_type(sample);");
  });

  @def test_should_get_type_value([Atom], {
    sample = SampleType%{name: 'Benus', age: 30};
    Assert.assert('Benus', sample.name);
  });

//  @def test_should_get_type_value_interp([Atom], {
//    @native Lang.eval("sample = SampleType%{name: 'Benus', age: 30};
//      Assert.assert('Benus', sample.name);");
//  });
//
  @def test_should_create_a_new_custom_type_when_updating_a_value([Atom], {
    sample1 = SampleType%{name: 'Ellie', age: 3};
    sample2 = SampleType.set(sample1, @_'name', 'bear');
    Assert.assert('Ellie', sample1.name);
    Assert.assert('bear', sample2.name);
    Assert.refute(sample1.name, sample2.name);
  });
//
//  @def test_should_create_a_new_custom_type_when_updating_a_value_interp([Atom], {
//    @native Lang.eval("
//    sample1 = SampleType%{name: 'Ellie', age: 3};
//    sample2 = SampleType.set(sample1, @_'name', 'bear');
//    Assert.assert('Ellie', sample1.name);
//    Assert.assert('bear', sample2.name);
//    Assert.refute(sample1.name, sample2.name);
//    ");
//  });
//
  @def test_should_pattern_match_on_assignment([Atom], {
    sample1 = SampleType%{name: 'Ellie', age: 3};
    SampleType%{name: name, age: age} = sample1;
    Assert.assert('Ellie', name);
    Assert.assert(3, age);

    sample2 = SampleType%{name: 'Bear', age: 5};
    SampleType%{name: 'Bear', age: age} = sample2;
    Assert.assert(5, age);
  });
//
//  @def test_should_pattern_match_on_assignment_interp([Atom], {
//    @native Lang.eval("
//    sample1 = SampleType%{name: 'Ellie', age: 3};
//    SampleType%{name: name, age: age} = sample1;
//    Assert.assert('Ellie', name);
//    Assert.assert(3, age);
//
//    sample2 = SampleType%{name: 'Bear', age: 5};
//    SampleType%{name: 'Bear', age: age} = sample2;
//    Assert.assert(5, age);
//    ");
//  });
//
  @def test_should_create_custom_type_with_variable_values([Atom], {
    name = 'Ellie';
    age = 3;
    sample1 = SampleType%{name: name, age: age};
    Assert.assert('Ellie', sample1.name);
    Assert.assert(3, sample1.age);
  });
//
//  @def test_should_create_custom_type_with_variable_values_interp([Atom], {
//    @native Lang.eval("
//    name = 'Ellie';
//    age = 3;
//    sample1 = SampleType%{name: name, age: age};
//    Assert.assert('Ellie', sample1.name);
//    Assert.assert(3, sample1.age);
//    ");
//  });
//
  @def test_should_use_dot_operator_to_fetch_field_value([Atom], {
    sample1 = SampleType%{name: 'Ellie', age: 3};
    name = sample1.name;
    age = sample1.age;
    Assert.assert('Ellie', name);
    Assert.assert(3, age);
  });
//
//  @def test_should_use_dot_operator_to_fetch_field_value_interp([Atom], {
//    @native Lang.eval("
//    sample1 = SampleType%{name: 'Ellie', age: 3};
//    name = sample1.name;
//    age = sample1.age;
//    Assert.assert('Ellie', name);
//    Assert.assert(3, age);
//    ");
//  });
//
  @def test_should_pattern_match_function_signature([Atom], {
    sample1 = SampleType%{name: 'Ellie', age: 3};
    match_signature(sample1);
  });
//
//  @def test_should_pattern_match_function_signature_interp([Atom], {
//    @native Lang.eval("
//    sample1 = SampleType%{name: 'Ellie', age: 3};
//    CustomTypesTest.match_signature(sample1);
//    ");
//  });
//
  @def test_should_handle_composable_types([Atom], {
    obj = SampleComposeType%{name: 'foo', sample: SampleType%{name: 'bar', age: 43}};
    sample = obj.sample;
    Assert.assert('foo', obj.name);
    Assert.assert('bar', sample.name);
    Assert.assert(43, sample.age);
  });
//
//  @def test_should_handle_composable_types_interp([Atom], {
//    @native Lang.eval("
//    obj = SampleComposeType%{name: 'foo', sample: SampleType%{name: 'bar', age: 43}};
//    sample = obj.sample;
//    Assert.assert('foo', obj.name);
//    Assert.assert('bar', sample.name);
//    Assert.assert(43, sample.age);
//    ");
//  });
//
//  @def test_should_define_custom_type_interp([Atom], {
//    @native Lang.eval("
//      deftype(Pets, {
//        var cow: String;
//        var bird: String;
//      });
//      pets = Pets%{cow: 'Beatrice', bird: 'Ally'};
//      Assert.assert('Beatrice', pets.cow);
//      Assert.assert('Ally', pets.bird);
//    ");
//  });
//
  @def match_signature({SampleType: SampleType%{name: 'Ellie', age: age}}, [Atom], {
    Assert.assert(3, age);
  });

  @def pass_type({SampleType: sample}, [Atom], {
    Assert.assert(@_'true');
  });
})