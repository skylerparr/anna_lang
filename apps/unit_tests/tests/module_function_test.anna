defmodule(ModuleFunctionTest, {
  @alias vm.Function;
  @alias vm.Lang;

  @def test_should_invoke_function_with_static_arg([Atom], {
    single_arg(@_'true');
  });

  @def test_should_invoke_function_with_static_arg_interp([Atom], {
    @native Lang.eval("ModuleFunctionTest.single_arg(@_'true');");
  });

  @def test_should_invoke_public_functions_with_variables([Atom], {
    number = 4;
    result = Kernel.add(1, number);
    Assert.assert(5, result);
  });

  @def test_should_invoke_public_functions_with_variables_interp([Atom], {
    @native Lang.eval("number = 4;
    result = Kernel.add(7, number);
    Assert.assert(11, result);");
  });

  @def test_should_interpret_code_with_sharing_var_names_to_prevent_memory_exposure([Atom], {
    @native Lang.eval("string = 'foo';
    result = Str.concat(string, ' bar');
    Assert.assert('foo bar', result);");
  });

  @def test_should_invoke_function_with_cast([Atom], {
    ({val | _;}) = {'foo'; 'bar'; 'cat'; 'baz';};
    result = Str.concat(cast(val, String), ' bar');
    Assert.assert('foo bar', result);
  });

  @def test_should_invoke_function_with_cast_interp([Atom], {
    @native Lang.eval("({val | _;}) = {'foo'; 'bar'; 'cat'; 'baz';};
    result = Str.concat(cast(val, String), ' bar');
    Assert.assert('foo bar', result);");
  });

  @def test_should_create_anonymous_function_with_no_args([Atom], {
    fun = @fn {
      [{}] => {
        @_'true';
      };
    };
    result = fun();
    Assert.assert(cast(result, Atom));
  });

//  @def test_should_create_anonymous_function_with_no_args_interp([Atom], {
//    @native Lang.eval("fun = @fn {
//      [{}] => {
//        @_'true';
//      };
//    };
//    result = fun();
//    Assert.assert(cast(result, Atom));");
//  });
//
  @def test_should_create_anonymous_function_with_1_arg([Atom], {
    fun = @fn {
      [{Atom: status}] => {
        status;
      };
    };
    result = fun(@_'true');
    Assert.assert(cast(result, Atom));

    result = fun(@_'false');
    Assert.refute(cast(result, Atom));
  });
//
//  @def test_should_create_anonymous_function_with_1_arg_interp([Atom], {
//    @native Lang.eval("fun = @fn {
//      [{Atom: status}] => {
//        status;
//      };
//    };
//    result = fun(@_'true');
//    Assert.assert(cast(result, Atom));
//
//    result = fun(@_'false');
//    Assert.refute(cast(result, Atom));");
//  });
//
  @def test_should_create_anonymous_function_with_2_args([Atom], {
    fun = @fn {
      [{Int: a, Int: b}] => {
        Kernel.add(a, b);
      };
    };
    result = fun(32, 563);
    Assert.assert(595, cast(result, Int));
    Assert.refute(532, cast(result, Int));
  });

//  @def test_should_create_anonymous_function_with_2_args_interp([Atom], {
//    @native Lang.eval("fun = @fn {
//      [{Int: a, Int: b}] => {
//        Kernel.add(a, b);
//      };
//    };
//    result = fun(32, 563);
//    Assert.assert(595, cast(result, Int));
//    Assert.refute(532, cast(result, Int));");
//  });

  @def test_should_interpret_function_string_and_assign_to_the_compiled_code_and_execute([Atom], {
    fun_interp = @native Lang.eval("@fn {
      [{Int: a, Int: b}] => {
        Kernel.add(a, b);
      };
    };");
    fun = cast(fun_interp, Function);
    result = fun(32, 563);
    Assert.assert(595, cast(result, Int));
    Assert.refute(532, cast(result, Int));
  });

  @def test_should_pattern_match_individual_anonymous_function_heads([Atom], {
    fun = @fn {
      [{Atom: @_'ok'}] => {
        @_'true';
      };
      [{Atom: @_'error'}] => {
        @_'false';
      };
    };
    result = fun(@_'ok');
    Assert.assert(cast(result, Atom));
    result = fun(@_'error');
    Assert.refute(cast(result, Atom));
  });
//
//  @def test_should_pattern_match_individual_anonymous_function_heads_interp([Atom], {
//    @native Lang.eval("fun = @fn {
//      [{Atom: @_'ok'}] => {
//        @_'true';
//      };
//      [{Atom: @_'error'}] => {
//        @_'false';
//      };
//    };
//    result = fun(@_'ok');
//    Assert.assert(cast(result, Atom));
//    result = fun(@_'error');
//    Assert.refute(cast(result, Atom));");
//  });
//
  @def test_should_create_new_module_interp([Atom], {
    @native Lang.eval("
    defmodule(Foo, {

      @def new_func({Atom: @_'ok'}, [Atom], {
        @_'true';
      });

      @def new_func({Atom: @_'error'}, [Atom], {
        @_'false';
      });

    });

    result = Foo.new_func(@_'error');
    Assert.refute(result);
    result = Foo.new_func(@_'ok');
    Assert.assert(result);
    ");
  });

  @def test_should_call_api_function([Atom], {
    Assert.assert(FooApi.go(@_'true'));
    Assert.refute(FooApi.go(@_'false'));
  });

  @def test_should_call_api_function_interp([Atom], {
    @native Lang.eval("Assert.assert(FooApi.go(@_'true'));
    Assert.refute(FooApi.go(@_'false'));");
  });

  @def test_should_create_new_api_interp([Atom], {
    @native Lang.eval("defapi(MyApi, {
      @def fun({Atom: arg}, [Atom]);
    });
    defmodule(MyApiImpl, {
      @impl MyApi;

      @def fun({Atom: arg}, [Atom], {
        arg;
      });
    });
    set_iface(MyApi, MyApiImpl);
    result = MyApi.fun(@_'true');
    ModuleFunctionTest.single_arg(result)");
  });

  @def test_should_call_native_functions([Atom], {
    pid = @native vm.Process.self();
    Assert.assert(pid, Kernel.self());
  });

  @def test_should_call_native_functions_interp([Atom], {
    @native Lang.eval("pid = @native vm.Process.self();
      Assert.assert(pid, Kernel.self());");
  });

  @def test_should_handle_message_passing([Atom], {
    me = Kernel.self();
    pid = Kernel.spawn(@fn {
      [{}] => {
        Kernel.send(me, @_'success');
      };
    });
    result = Kernel.receive(@fn {
      [{Atom: status}] => {
        status;
      };
    });
    Assert.assert(cast(result, Atom), @_'success');
  });

  //this is a strange one, it crashes the vm after running tests, compiling, then running tests again
//  @def test_should_handle_message_passing_interp([Atom], {
//    @native Lang.eval("
//      defmodule(TestDrive, {
//        @def test([String], {
//          me = Kernel.self();
//          pid = Kernel.spawn(@fn {
//            [{}] => {
//              Kernel.send(me, @_'success');
//            };
//          });
//          result = Kernel.receive(@fn {
//            [{Atom: status}] => {
//              status;
//            };
//          });
//          Assert.assert(cast(result, Atom), @_'success');
//        });
//      });
//    ");
//    @native Lang.eval('TestDrive.test()');
//  });

  @def single_arg({Atom: status}, [Atom], {
    Assert.refute(status, @_'false');
    Assert.assert(status, @_'true');
    @_'true';
  });

})