defmodule(MMapTest, {
  @alias vm.Lang;

  @def test_should_create_constant_map([Atom], {
    Assert.assert(['foo' => 'bar'], ['foo' => 'bar']);
  });

  @def test_should_create_constant_map_interp([Atom], {
    result = @native Lang.eval("['foo' => 'bar']");
    Assert.assert(['foo' => 'bar'], cast(result, MMap));
  });

  @def test_should_create_map_with_variable_value([Atom], {
    bar = 'bar';
    Assert.assert(['foo' => 'bar'], ['foo' => bar]);
  });

  @def test_should_create_map_with_variable_value_interp([Atom], {
    @native Lang.eval("bar = 'bar'; Assert.assert(['foo' => 'bar'], ['foo' => bar]);");
  });

  @def test_should_create_map_with_variable_key([Atom], {
    bar = 'foo';
    Assert.assert(['foo' => 'bar'], [bar => 'bar']);
  });

  @def test_should_create_map_with_variable_key_interp([Atom], {
    @native Lang.eval("foo = 'foo'; Assert.assert(['foo' => 'bar'], [foo => 'bar']);");
  });

  @def test_should_create_map_with_variable_key_and_variable_value([Atom], {
    foo = 'foo';
    bar = 'bar';
    Assert.assert(['foo' => 'bar'], [foo => bar]);
  });

  @def test_should_create_map_with_variable_key_and_variable_value_interp([Atom], {
    @native Lang.eval("foo = 'foo';
    bar = 'bar';
    Assert.assert(['foo' => 'bar'], [foo => bar]);");
  });

  @def test_should_pattern_match_function_head([Atom], {
    map = ['foo' => 'bar', 'baz' => 'cat'];
    match_map(map);
  });

  @def test_should_pattern_match_function_head_with_tuple_and_nested_map([Atom], {
    map = ['foo' => 'bar', 'baz' => 'cat'];
    match_tuple([@_'ok', map]);
  });

  @def test_should_pattern_match_map_within_tuple([Atom], {
    map = ['foo' => 'bar', 'baz' => 'cat'];
    tup = [@_'ok', map];
    [@_'ok', ['foo' => foo, 'baz' => baz]] = tup;
    Assert.assert('bar', cast(foo, String));
    Assert.assert('cat', cast(baz, String));
  });

  @def match_map({MMap: ['foo' => foo, 'baz' => baz]}, [Atom], {
    Assert.assert('bar', cast(foo, String));
    Assert.assert('cat', cast(baz, String));
  });

  @def match_tuple({Tuple: [@_'ok', ['foo' => foo, 'baz' => baz]]}, [Atom], {
    Assert.assert('bar', cast(foo, String));
    Assert.assert('cat', cast(baz, String));
  });
})