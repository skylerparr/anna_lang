defmodule(UnitTests, {
  @alias vm.Process;
  @alias vm.NativeKernel;
  @alias vm.Classes;
  @alias vm.Pid;

  @const ALL_TESTS = @_'all_tests';
  @const TEST_RESULTS = @_'test_results';
  @const DEFAULT_RESULTS = [[], [], @_'false'];

  @def start([Tuple], {
    all_tests_pid = Kernel.spawn_link(@_'UnitTests', @_'start_tests_store', @tuple[], {});
    Kernel.register_pid(all_tests_pid, ALL_TESTS);

    test_results_pid = Kernel.spawn_link(@_'UnitTests', @_'start_test_results_store', @tuple[], {});
    Kernel.register_pid(test_results_pid, TEST_RESULTS);

    [@_'ok', all_tests_pid];
  });

  @def start_tests_store([LList], {
    tests_store_loop({});
  });

  @def tests_store_loop({LList: all_tests}, [LList], {
    received = Kernel.receive(@fn {
      [{Tuple: [@_'store', test_module]}] => {
        @native LList.add(all_tests, test_module);
      };
      [{Tuple: [@_'get', respond_pid]}] => {
        @native NativeKernel.send(respond_pid, all_tests);
        @native LList.empty();
      };
    });
    tests_store_loop(cast(received, LList));
  });

  @def add_test({Atom: module}, [Atom], {
    all_tests_pid = Kernel.get_pid_by_name(ALL_TESTS);
    Kernel.send(all_tests_pid, [@_'store', module]);
    @_'ok';
  });

  @def start_test_results_store([Tuple], {
    test_results_store_loop(DEFAULT_RESULTS);
  });

  @def test_results_store_loop({Tuple: [all_tests, test_results, all_tests_registered]}, [Tuple], {
    received = Kernel.receive(@fn {
      [{Tuple: [@_'save', test_pid, test_name, module, func, status, payload]}] => {
        test_results = @native MMap.put(test_results, test_pid, [test_name, module, func, status, payload]);
        [all_tests, test_results, all_tests_registered];
      };
      [{Tuple: [@_'update_status', test_pid, new_status]}] => {
        test_status = [test_name, module, func, ~new_status, payload] = @native MMap.get(test_results, test_pid);
        test_results = @native MMap.put(test_results, test_pid, test_status);
        [all_tests, test_results, all_tests_registered];
      };
      [{Tuple: [@_'start_test', test_name]}] => {
        all_tests = @native MMap.put(all_tests, test_name, @_'running');
        [all_tests, test_results, all_tests_registered];
      };
      [{Tuple: [@_'end_test', test_name]}] => {
        all_tests = @native MMap.put(all_tests, test_name, @_'finished');
        [all_tests, test_results, all_tests_registered];
      };
      [{Tuple: [@_'suite_finished']}] => {
        [all_tests, test_results, @_'true'];
      };
      [{Tuple: [@_'get_result', respond_pid, test_pid]}] => {
        test_result = @native MMap.get(test_results, test_pid);
        Kernel.send(cast(respond_pid, Pid), cast(test_result, Tuple));
        [all_tests, test_results, all_tests_registered];
      };
      [{Tuple: [@_'get', receive_pid]}] => {
        Kernel.send(cast(receive_pid, Pid), cast([all_tests, test_results, all_tests_registered], Tuple));
        [all_tests, test_results, all_tests_registered];
      };
      [{Tuple: [@_'reset']}] => {
        DEFAULT_RESULTS;
      };
      [{Tuple: fallthrough}] => {
        @native IO.inspect(fallthrough);
        [all_tests, test_results, all_tests_registered];
      };
    });
    test_results_store_loop(cast(received, Tuple));
  });

  @def add_test_result({Pid: test_pid, String: test_name, Atom: module, Atom: func, Atom: result, MMap: payload}, [Atom], {
    pid = Kernel.get_pid_by_name(TEST_RESULTS);
    Kernel.send(pid, [@_'save', test_pid, test_name, module, func, result, payload]);
    @_'ok';
  });

  @def get_test_results([Tuple], {
    pid = Kernel.get_pid_by_name(TEST_RESULTS);
    self = Kernel.self();
    Kernel.send(pid, [@_'get', self]);
    Kernel.receive(@fn {
      [{Tuple: result}] => {
        result;
      };
    });
  });

  @def start_test({String: test_name}, [Atom], {
    pid = Kernel.get_pid_by_name(TEST_RESULTS);
    Kernel.send(pid, [@_'start_test', test_name]);
    @_'ok';
  });

  @def end_test({String: test_name}, [Atom], {
    pid = Kernel.get_pid_by_name(TEST_RESULTS);
    Kernel.send(pid, [@_'end_test', test_name]);
    @_'ok';
  });

  @def suite_finished([Atom], {
    pid = Kernel.get_pid_by_name(TEST_RESULTS);
    Kernel.send(pid, [@_'suite_finished']);
    @_'ok';
  });

  @def update_status({Pid: test_pid, Atom: @_'pass'}, [Atom], {
    status = @_'pass';
    pid = Kernel.get_pid_by_name(TEST_RESULTS);
    Kernel.send(pid, [@_'update_status', test_pid, status]);
    Kernel.send(test_pid, status);
    @_'ok';
  });

  @def update_status({Pid: test_pid, Atom: @_'fail'}, [Atom], {
    status = @_'fail';
    pid = Kernel.get_pid_by_name(TEST_RESULTS);
    Kernel.send(pid, [@_'update_status', test_pid, status]);
    self = Kernel.self();
    Kernel.send(pid, [@_'get_result', self, test_pid]);
    [test_name, module, func, new_status, payload] = Kernel.receive(@fn {
      [{Tuple: results}, [Tuple]] => {
        results;
      };
    });
    test_name = cast(test_name, String);
    end_test(test_name);
    header = Str.concat("Test Failure: ", test_name);
    System.println('');
    System.println(header);
    Kernel.exit(test_pid);
    @_'ok';
  });

  @def reset([Atom], {
    pid = Kernel.get_pid_by_name(TEST_RESULTS);
    Kernel.send(pid, [@_'reset']);
    @_'ok';
  });

  @def run_tests([Atom], {
    reset();
    all_tests_pid = Kernel.get_pid_by_name(ALL_TESTS);
    self = Kernel.self();
    Kernel.send(all_tests_pid, [@_'get', self]);
    all_tests = Kernel.receive(@fn {
      [{LList: all_tests}] => {
        all_tests;
      };
    });
    do_run_tests(cast(all_tests, LList));
    wait_for_tests_to_complete();
    @_'ok';
  });

  @def do_run_tests({LList: {}}, [Atom], {
    @_'ok';
  });

  @def do_run_tests({LList: {module | rest;}}, [Atom], {
    functions = @native Classes.getApiFunctions(module);
    Kernel.spawn(@_'UnitTests', @_'run_test_case', [@_'Atom', @_'LList'], {module; functions;});
    do_run_tests(cast(rest, LList));
  });

  @def wait_for_tests_to_complete([Atom], {
    do_wait(@_'wait');
  });

  @def do_wait({Atom: @_'true'}, [Atom], {
    System.println('');
    @_'ok';
  });

  @def do_wait({Atom: _}, [Atom], {
    [all_tests, _, all_tests_ran] = get_test_results();
    result = did_all_tests_run(cast(all_tests, MMap), cast(all_tests_ran, Atom));
    do_wait(result);
  });

  @def did_all_tests_run({MMap: all_tests, Atom: @_'true'}, [Atom], {
    all_finished = EEnum.all(cast(all_tests, MMap), @fn {
      [{Atom: @_'finished'}] => {
        @_'true';
      };
        [{Atom: _}] => {
        @_'false';
      };
    });
    do_sleep = @fn {
      [{Atom: @_'false'}] => {
        Kernel.sleep(10);
        @_'false';
      };
        [{Atom: _}] => {
        @_'true';
      };
    }
    do_sleep(all_finished);
  });

  @def did_all_tests_run({MMap: _, Atom: _}, [Atom], {
    Kernel.sleep(10);
    @_'false';
  });

  @def run_test_case({Atom: module, LList: {}}, [Tuple], {
    suite_finished();
    [@_'ok', 'tests complete'];
  });

  @def run_test_case({Atom: module, LList: {first | rest;}}, [Tuple], {
    fun_string = @native Atom.to_s(first);
    run_test(module, fun_string);
    run_test_case(module, cast(rest, LList));
  });

  @def run_test({Atom: module, String: 'test_' => test_name}, [Atom], {
    test_name = Str.concat('test_', test_name);
    test_fun = @native Atom.create(test_name);
    start_test(test_name);
    pid = Kernel.spawn(@fn {
      [{}] => {
        module = cast(module, Atom);
        test_fun = cast(test_fun, Atom);
        self_pid = Kernel.self();

        add_test_result(self_pid, test_name, module, test_fun, @_'no_assertions', []);
        run_test(module, test_fun);
        end_test(test_name);
      };
    });
    Kernel.monitor(pid);
    Kernel.receive(@fn {
      [{Tuple: [@_"DOWN", pid, @_'crashed']}] => {
        update_status(pid, @_'fail');
      };
      [{Tuple: status}] => {
        System.print(".");
      };
    }, 60000);
    @_'ok';
  });

  @def run_test({Atom: module, String: 'skip_' => test_name}, [Atom], {
    System.print('*');
    @_'no_test';
  });

  @def run_test({Atom: module, Atom: test_fun}, [Dynamic], {
    Kernel.apply(module, test_fun, @tuple[], {});
  });

  @def run_test({Atom: module, String: _}, [Atom], {
    @_'no_test';
  });

})